#!/usr/bin/perl

# Daniel "Trizen" È˜uteu
# License: GPLv3
# Date: 01 January 2012
# Edit: 08 January 2018
# https://github.com/trizen

# Find and list duplicate files from one or more paths, with options for
# deleting or replacing duplicate files with symbolic links to the main file.

use 5.005;
use strict;
use warnings;

use File::Find qw(find);
use File::Compare qw(compare);
use Getopt::Std qw(getopts);

my @dirs = grep { (-d) or (-f) } @ARGV;
die <<"HELP" if !@dirs;
usage: $0 [options] /my/path [...]

Options:
    -f  : keep only the first duplicated file
    -l  : keep only the last duplicated file
    -s  : replace duplicate files with symbolic links (with -f or -l)
HELP

my %opt;
if (@ARGV) {
    getopts("fls", \%opt);
}

sub find_duplicated_files (&@) {
    my $callback = shift;

    my %files;
    find {
        no_chdir => 1,
        wanted   => sub {
            lstat;
            (-f _) && (not -l _) && push @{$files{-s _}}, $_;
        }
    } => @_;

    foreach my $files (values %files) {

        next if $#{$files} < 1;

        my %dups;
        foreach my $i (0 .. $#{$files} - 1) {
            for (my $j = $i + 1 ; $j <= $#{$files} ; $j++) {
                if (compare($files->[$i], $files->[$j]) == 0) {
                    push @{$dups{$files->[$i]}}, splice @{$files}, $j--, 1;
                }
            }
        }

        while (my ($fparent, $fdups) = each %dups) {
            $callback->(sort $fparent, @{$fdups});
        }
    }

    return;
}

{
    local $, = "\n";
    local $\ = "\n";

    find_duplicated_files {
        my (@files) = @_;

        print @files, "-" x 80;

        my $main_file = (
                           $opt{f} ? shift(@files)
                         : $opt{l} ? pop(@files)
                         :           return
                        );

        foreach my $file (@files) {

            print ":: Removing: `$file`";

            unlink($file) or do {
                warn "error: can't delete file `$file': $!\n";
                next;
            };

            if ($opt{s}) {
                print ":: Symlinking: `$main_file` <- `$file`";
                symlink($main_file, $file) or do {
                    warn "error: can't create symbolic link for `$file': $!\n";
                    next;
                };
            }
        }
    } @dirs;
}
